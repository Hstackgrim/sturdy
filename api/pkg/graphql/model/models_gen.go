// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
)

type Comment interface {
	IsComment()
}

type FileOrDirectory interface {
	IsFileOrDirectory()
}

type Integration interface {
	IsIntegration()
}

type Notification interface {
	IsNotification()
}

type WorkspaceActivity interface {
	IsWorkspaceActivity()
}

type ACL struct {
	ID     string `json:"id"`
	Policy string `json:"policy"`
}

type AddUserToOrganizationInput struct {
	OrganizationID string `json:"organizationID"`
	Email          string `json:"email"`
}

type ApplySuggestionHunksInput struct {
	ID      string   `json:"id"`
	HunkIDs []string `json:"hunkIDs"`
}

type ArchiveNotificationsInput struct {
	Ids []string `json:"ids"`
}

type Author struct {
	ID        string  `json:"id"`
	AvatarURL *string `json:"avatarUrl"`
	Email     string  `json:"email"`
	Name      string  `json:"name"`
}

type BuildkiteIntegration struct {
	ID            string                             `json:"id"`
	CodebaseID    string                             `json:"codebaseID"`
	Provider      IntegrationProvider                `json:"provider"`
	CreatedAt     int                                `json:"createdAt"`
	UpdatedAt     *int                               `json:"updatedAt"`
	DeletedAt     *int                               `json:"deletedAt"`
	Configuration *BuildkiteIntegrationConfiguration `json:"configuration"`
}

func (BuildkiteIntegration) IsIntegration() {}

type BuildkiteIntegrationConfiguration struct {
	ID               string `json:"id"`
	OrganizationName string `json:"organizationName"`
	PipelineName     string `json:"pipelineName"`
	APIToken         string `json:"apiToken"`
	WebhookSecret    string `json:"webhookSecret"`
}

type Change struct {
	ID            string               `json:"id"`
	Comments      []*TopComment        `json:"comments"`
	Title         string               `json:"title"`
	Description   string               `json:"description"`
	TrunkCommitID *string              `json:"trunkCommitID"`
	Author        *Author              `json:"author"`
	CreatedAt     int                  `json:"createdAt"`
	Diffs         []*FileDiff          `json:"diffs"`
	DownloadTarGz *ContentsDownloadURL `json:"downloadTarGz"`
	DownloadZip   *ContentsDownloadURL `json:"downloadZip"`
	Statuses      []*Status            `json:"statuses"`
}

type Codebase struct {
	ID                string                     `json:"id"`
	ShortID           string                     `json:"shortID"`
	Name              string                     `json:"name"`
	Description       string                     `json:"description"`
	InviteCode        *string                    `json:"inviteCode"`
	CreatedAt         int                        `json:"createdAt"`
	ArchivedAt        *int                       `json:"archivedAt"`
	LastUpdatedAt     *int                       `json:"lastUpdatedAt"`
	Workspaces        []*Workspace               `json:"workspaces"`
	Members           []*Author                  `json:"members"`
	ACL               *ACL                       `json:"acl"`
	IsPublic          bool                       `json:"isPublic"`
	Views             []*View                    `json:"views"`
	LastUsedView      *View                      `json:"lastUsedView"`
	IsReady           bool                       `json:"isReady"`
	Changes           []*Change                  `json:"changes"`
	Readme            *File                      `json:"readme"`
	File              FileOrDirectory            `json:"file"`
	GitHubIntegration *CodebaseGitHubIntegration `json:"gitHubIntegration"`
	Integrations      []Integration              `json:"integrations"`
}

type CodebaseChangesInput struct {
	Limit *int `json:"limit"`
}

type CodebaseGitHubIntegration struct {
	ID                    string    `json:"id"`
	Owner                 string    `json:"owner"`
	Name                  string    `json:"name"`
	CreatedAt             int       `json:"createdAt"`
	UninstalledAt         *int      `json:"uninstalledAt"`
	TrackedBranch         *string   `json:"trackedBranch"`
	SyncedAt              *int      `json:"syncedAt"`
	Enabled               bool      `json:"enabled"`
	GitHubIsSourceOfTruth bool      `json:"gitHubIsSourceOfTruth"`
	LastPushErrorMessage  *string   `json:"lastPushErrorMessage"`
	LastPushAt            *int      `json:"lastPushAt"`
	Codebase              *Codebase `json:"codebase"`
}

type CommentCodeContext struct {
	ID                  string `json:"id"`
	Path                string `json:"path"`
	LineStart           int    `json:"lineStart"`
	LineEnd             int    `json:"lineEnd"`
	LineIsNew           bool   `json:"lineIsNew"`
	Context             string `json:"context"`
	ContextStartsAtLine int    `json:"contextStartsAtLine"`
}

type CommentNotification struct {
	ID         string           `json:"id"`
	Type       NotificationType `json:"type"`
	CreatedAt  int              `json:"createdAt"`
	ArchivedAt *int             `json:"archivedAt"`
	Codebase   *Codebase        `json:"codebase"`
	Comment    Comment          `json:"comment"`
}

func (CommentNotification) IsNotification() {}

type ContentsDownloadURL struct {
	ID  string `json:"id"`
	URL string `json:"url"`
}

type CopyWorkspaceToViewInput struct {
	ViewID      string `json:"viewID"`
	WorkspaceID string `json:"workspaceID"`
}

type CreateCommentInput struct {
	Message     string  `json:"message"`
	InReplyTo   *string `json:"inReplyTo"`
	Path        *string `json:"path"`
	LineStart   *int    `json:"lineStart"`
	LineEnd     *int    `json:"lineEnd"`
	LineIsNew   *bool   `json:"lineIsNew"`
	ChangeID    *string `json:"changeID"`
	WorkspaceID *string `json:"workspaceID"`
	ViewID      *string `json:"viewID"`
}

type CreateOrUpdateBuildkiteIntegrationInput struct {
	IntegrationID    *string `json:"integrationID"`
	CodebaseID       string  `json:"codebaseID"`
	OrganizationName string  `json:"organizationName"`
	PipelineName     string  `json:"pipelineName"`
	APIToken         string  `json:"apiToken"`
	WebhookSecret    string  `json:"webhookSecret"`
}

type CreateOrUpdateGitHubPullRequestInput struct {
	WorkspaceID string   `json:"workspaceID"`
	PatchIDs    []string `json:"patchIDs"`
}

type CreateOrganizationInput struct {
	Name string `json:"name"`
}

type CreateReviewInput struct {
	WorkspaceID string      `json:"workspaceID"`
	Grade       ReviewGrade `json:"grade"`
}

type CreateServiceTokenInput struct {
	ShortCodebaseID string `json:"shortCodebaseID"`
	Name            string `json:"name"`
}

type CreateSuggestionInput struct {
	WorkspaceID string `json:"workspaceID"`
}

type CreateViewInput struct {
	WorkspaceID   string `json:"workspaceID"`
	MountPath     string `json:"mountPath"`
	MountHostname string `json:"mountHostname"`
}

type CreateWorkspaceFromGitHubBranchInput struct {
	CodebaseID string `json:"codebaseID"`
	BranchName string `json:"branchName"`
}

type CreateWorkspaceInput struct {
	CodebaseID              string  `json:"codebaseID"`
	OnTopOfChange           *string `json:"onTopOfChange"`
	OnTopOfChangeWithRevert *string `json:"onTopOfChangeWithRevert"`
}

type DeleteIntegrationInput struct {
	ID string `json:"id"`
}

type Directory struct {
	ID       string            `json:"id"`
	Path     string            `json:"path"`
	Children []FileOrDirectory `json:"children"`
	Readme   *File             `json:"readme"`
}

func (Directory) IsFileOrDirectory() {}

type DismissReviewInput struct {
	ID string `json:"id"`
}

type DismissSuggestionHunksInput struct {
	ID      string   `json:"id"`
	HunkIDs []string `json:"hunkIDs"`
}

type DismissSuggestionInput struct {
	ID string `json:"id"`
}

type ExtractWorkspaceInput struct {
	WorkspaceID string   `json:"workspaceID"`
	PatchIDs    []string `json:"patchIDs"`
}

type File struct {
	ID       string `json:"id"`
	Path     string `json:"path"`
	Contents string `json:"contents"`
	MimeType string `json:"mimeType"`
}

func (File) IsFileOrDirectory() {}

type FileDiff struct {
	ID            string         `json:"id"`
	OrigName      string         `json:"origName"`
	NewName       string         `json:"newName"`
	PreferredName string         `json:"preferredName"`
	IsDeleted     bool           `json:"isDeleted"`
	IsNew         bool           `json:"isNew"`
	IsMoved       bool           `json:"isMoved"`
	IsLarge       bool           `json:"isLarge"`
	LargeFileInfo *LargeFileInfo `json:"largeFileInfo"`
	IsHidden      bool           `json:"isHidden"`
	Hunks         []*Hunk        `json:"hunks"`
}

type GitHubAccount struct {
	ID    string `json:"id"`
	Login string `json:"login"`
}

type GitHubApp struct {
	ID       string `json:"_id"`
	Name     string `json:"name"`
	ClientID string `json:"clientID"`
}

type GitHubPullRequest struct {
	ID                string     `json:"id"`
	PullRequestNumber int        `json:"pullRequestNumber"`
	Open              bool       `json:"open"`
	Merged            bool       `json:"merged"`
	MergedAt          *int       `json:"mergedAt"`
	Base              string     `json:"base"`
	Workspace         *Workspace `json:"workspace"`
	Statuses          []*Status  `json:"statuses"`
}

type GitHubRepositoryImported struct {
	ID         string                     `json:"id"`
	Type       NotificationType           `json:"type"`
	CreatedAt  int                        `json:"createdAt"`
	ArchivedAt *int                       `json:"archivedAt"`
	Codebase   *Codebase                  `json:"codebase"`
	Repository *CodebaseGitHubIntegration `json:"repository"`
}

func (GitHubRepositoryImported) IsNotification() {}

type Hunk struct {
	ID          string `json:"id"`
	Patch       string `json:"patch"`
	IsOutdated  bool   `json:"isOutdated"`
	IsApplied   bool   `json:"isApplied"`
	IsDismissed bool   `json:"isDismissed"`
}

type ImportGitHubPullRequestsInput struct {
	CodebaseID string `json:"codebaseID"`
}

type LandWorkspaceChangeInput struct {
	WorkspaceID string   `json:"workspaceID"`
	PatchIDs    []string `json:"patchIDs"`
}

type LargeFileInfo struct {
	ID   string `json:"id"`
	Size int    `json:"size"`
}

type LicenseValidation struct {
	ID      string                  `json:"_id"`
	Status  LicenseValidationStatus `json:"status"`
	Message *string                 `json:"message"`
}

type MergeGitHubPullRequestInput struct {
	WorkspaceID string `json:"workspaceID"`
}

type NewSuggestionNotification struct {
	ID         string           `json:"id"`
	Type       NotificationType `json:"type"`
	CreatedAt  int              `json:"createdAt"`
	ArchivedAt *int             `json:"archivedAt"`
	Codebase   *Codebase        `json:"codebase"`
	Suggestion *Suggestion      `json:"suggestion"`
}

func (NewSuggestionNotification) IsNotification() {}

type NotificationPreference struct {
	Type    NotificationType    `json:"type"`
	Channel NotificationChannel `json:"channel"`
	Enabled bool                `json:"enabled"`
}

type OnboardingStep struct {
	ID string `json:"id"`
}

type OpenWorkspaceOnViewInput struct {
	ViewID      string `json:"viewID"`
	WorkspaceID string `json:"workspaceID"`
}

type Organization struct {
	ID        string      `json:"id"`
	Name      string      `json:"name"`
	Members   []*Author   `json:"members"`
	Codebases []*Codebase `json:"codebases"`
}

type ReadWorkspaceActivity struct {
	ID string `json:"id"`
}

type RemovePatchesInput struct {
	WorkspaceID string   `json:"workspaceID"`
	HunkIDs     []string `json:"hunkIDs"`
}

type ReplyComment struct {
	ID        string      `json:"id"`
	Author    *Author     `json:"author"`
	CreatedAt int         `json:"createdAt"`
	DeletedAt *int        `json:"deletedAt"`
	Message   string      `json:"message"`
	Parent    *TopComment `json:"parent"`
}

func (ReplyComment) IsComment() {}

type ReportWorkspacePresenceInput struct {
	WorkspaceID string                 `json:"workspaceID"`
	State       WorkspacePresenceState `json:"state"`
}

type RequestReviewInput struct {
	WorkspaceID string `json:"workspaceID"`
	UserID      string `json:"userID"`
}

type RequestedReviewNotification struct {
	ID         string           `json:"id"`
	Type       NotificationType `json:"type"`
	CreatedAt  int              `json:"createdAt"`
	ArchivedAt *int             `json:"archivedAt"`
	Codebase   *Codebase        `json:"codebase"`
	Review     *Review          `json:"review"`
}

func (RequestedReviewNotification) IsNotification() {}

type Review struct {
	ID          string      `json:"id"`
	Author      *Author     `json:"author"`
	Grade       ReviewGrade `json:"grade"`
	CreatedAt   int         `json:"createdAt"`
	DismissedAt *int        `json:"dismissedAt"`
	IsReplaced  bool        `json:"isReplaced"`
	RequestedBy *Author     `json:"requestedBy"`
	Workspace   *Workspace  `json:"workspace"`
}

type ReviewNotification struct {
	ID         string           `json:"id"`
	Type       NotificationType `json:"type"`
	CreatedAt  int              `json:"createdAt"`
	ArchivedAt *int             `json:"archivedAt"`
	Codebase   *Codebase        `json:"codebase"`
	Review     *Review          `json:"review"`
}

func (ReviewNotification) IsNotification() {}

type ServiceToken struct {
	ID         string  `json:"id"`
	Name       string  `json:"name"`
	CreatedAt  int     `json:"createdAt"`
	LastUsedAt *int    `json:"lastUsedAt"`
	Token      *string `json:"token"`
}

type Status struct {
	ID                string             `json:"id"`
	Type              StatusType         `json:"type"`
	Title             string             `json:"title"`
	Description       *string            `json:"description"`
	Timestamp         int                `json:"timestamp"`
	DetailsURL        *string            `json:"detailsUrl"`
	Change            *Change            `json:"change"`
	GitHubPullRequest *GitHubPullRequest `json:"gitHubPullRequest"`
}

type Suggestion struct {
	ID          string      `json:"id"`
	Author      *Author     `json:"author"`
	Workspace   *Workspace  `json:"workspace"`
	For         *Workspace  `json:"for"`
	Diffs       []*FileDiff `json:"diffs"`
	CreatedAt   int         `json:"createdAt"`
	DismissedAt *int        `json:"dismissedAt"`
}

type TopComment struct {
	ID          string              `json:"id"`
	Author      *Author             `json:"author"`
	CreatedAt   int                 `json:"createdAt"`
	DeletedAt   *int                `json:"deletedAt"`
	Message     string              `json:"message"`
	Workspace   *Workspace          `json:"workspace"`
	Change      *Change             `json:"change"`
	CodeContext *CommentCodeContext `json:"codeContext"`
	Replies     []*ReplyComment     `json:"replies"`
}

func (TopComment) IsComment() {}

type TriggerInstantIntegrationInput struct {
	ChangeID  string   `json:"changeID"`
	Providers []string `json:"providers"`
}

type UnwatchWorkspaceInput struct {
	WorkspaceID string `json:"workspaceID"`
}

type UpdateACLInput struct {
	CodebaseID string  `json:"codebaseID"`
	Policy     *string `json:"policy"`
}

type UpdateCodebaseGitHubIntegrationInput struct {
	ID                    string `json:"id"`
	Enabled               *bool  `json:"enabled"`
	GitHubIsSourceOfTruth *bool  `json:"gitHubIsSourceOfTruth"`
}

type UpdateCodebaseInput struct {
	ID                 string  `json:"id"`
	Name               *string `json:"name"`
	DisableInviteCode  *bool   `json:"disableInviteCode"`
	GenerateInviteCode *bool   `json:"generateInviteCode"`
	Archive            *bool   `json:"archive"`
	IsPublic           *bool   `json:"isPublic"`
}

type UpdateCommentInput struct {
	ID      string `json:"id"`
	Message string `json:"message"`
}

type UpdateNotificationPreferenceInput struct {
	Type    NotificationType    `json:"type"`
	Channel NotificationChannel `json:"channel"`
	Enabled bool                `json:"enabled"`
}

type UpdateStatusInput struct {
	ChangeID    string     `json:"changeID"`
	Type        StatusType `json:"type"`
	Title       string     `json:"title"`
	Description *string    `json:"description"`
	DetailsURL  *string    `json:"detailsUrl"`
}

type UpdateUserInput struct {
	Name                           *string `json:"name"`
	Email                          *string `json:"email"`
	Password                       *string `json:"password"`
	NotificationsReceiveNewsletter *bool   `json:"notificationsReceiveNewsletter"`
}

type UpdateWorkspaceInput struct {
	ID               string  `json:"id"`
	Name             *string `json:"name"`
	DraftDescription *string `json:"draftDescription"`
}

type User struct {
	ID                             string                    `json:"id"`
	Name                           string                    `json:"name"`
	Email                          string                    `json:"email"`
	EmailVerified                  bool                      `json:"emailVerified"`
	AvatarURL                      *string                   `json:"avatarUrl"`
	NotificationsReceiveNewsletter bool                      `json:"notificationsReceiveNewsletter"`
	NotificationPreferences        []*NotificationPreference `json:"notificationPreferences"`
	Views                          []*View                   `json:"views"`
	LastUsedView                   *View                     `json:"lastUsedView"`
	GitHubAccount                  *GitHubAccount            `json:"gitHubAccount"`
}

type ValidateLicenseInput struct {
	Key           string `json:"key"`
	Version       string `json:"version"`
	BootedAt      int    `json:"bootedAt"`
	UserCount     int    `json:"userCount"`
	CodebaseCount int    `json:"codebaseCount"`
}

type VerifyEmailInput struct {
	Token string `json:"token"`
}

type View struct {
	ID                  string      `json:"id"`
	MountPath           string      `json:"mountPath"`
	ShortMountPath      string      `json:"shortMountPath"`
	MountHostname       string      `json:"mountHostname"`
	LastUsedAt          int         `json:"lastUsedAt"`
	CreatedAt           int         `json:"createdAt"`
	Author              *Author     `json:"author"`
	Workspace           *Workspace  `json:"workspace"`
	Status              *ViewStatus `json:"status"`
	Codebase            *Codebase   `json:"codebase"`
	IgnoredPaths        []string    `json:"ignoredPaths"`
	SuggestingWorkspace *Workspace  `json:"suggestingWorkspace"`
}

type ViewStatus struct {
	ID               string          `json:"id"`
	State            ViewStatusState `json:"state"`
	ProgressPath     *string         `json:"progressPath"`
	ProgressReceived *int            `json:"progressReceived"`
	ProgressTotal    *int            `json:"progressTotal"`
	LastError        *string         `json:"lastError"`
	SturdyVersion    string          `json:"sturdyVersion"`
	UpdatedAt        int             `json:"updatedAt"`
}

type WatchWorkspaceInput struct {
	WorkspaceID string `json:"workspaceID"`
}

type Workspace struct {
	Codebase          *Codebase            `json:"codebase"`
	ID                string               `json:"id"`
	Name              string               `json:"name"`
	Author            *Author              `json:"author"`
	CreatedAt         int                  `json:"createdAt"`
	LastLandedAt      *int                 `json:"lastLandedAt"`
	UpdatedAt         *int                 `json:"updatedAt"`
	ArchivedAt        *int                 `json:"archivedAt"`
	UnarchivedAt      *int                 `json:"unarchivedAt"`
	LastActivityAt    int                  `json:"lastActivityAt"`
	DraftDescription  string               `json:"draftDescription"`
	View              *View                `json:"view"`
	Comments          []*TopComment        `json:"comments"`
	SuggestingViews   []*View              `json:"suggestingViews"`
	UpToDateWithTrunk bool                 `json:"upToDateWithTrunk"`
	Conflicts         bool                 `json:"conflicts"`
	HeadChange        *Change              `json:"headChange"`
	Activity          []WorkspaceActivity  `json:"activity"`
	Reviews           []*Review            `json:"reviews"`
	Presence          []*WorkspacePresence `json:"presence"`
	Suggestion        *Suggestion          `json:"suggestion"`
	Suggestions       []*Suggestion        `json:"suggestions"`
	Statuses          []*Status            `json:"statuses"`
	Watchers          []*WorkspaceWatcher  `json:"watchers"`
	GitHubPullRequest *GitHubPullRequest   `json:"gitHubPullRequest"`
}

type WorkspaceActivityInput struct {
	UnreadOnly *bool `json:"unreadOnly"`
	Limit      *int  `json:"limit"`
}

type WorkspaceCommentActivity struct {
	ID        string     `json:"id"`
	CreatedAt int        `json:"createdAt"`
	Author    *Author    `json:"author"`
	IsRead    bool       `json:"isRead"`
	Workspace *Workspace `json:"workspace"`
	Comment   Comment    `json:"comment"`
}

func (WorkspaceCommentActivity) IsWorkspaceActivity() {}

type WorkspaceCreatedChangeActivity struct {
	ID        string     `json:"id"`
	CreatedAt int        `json:"createdAt"`
	Author    *Author    `json:"author"`
	IsRead    bool       `json:"isRead"`
	Workspace *Workspace `json:"workspace"`
	Change    *Change    `json:"change"`
}

func (WorkspaceCreatedChangeActivity) IsWorkspaceActivity() {}

type WorkspacePresence struct {
	ID           string                 `json:"id"`
	Author       *Author                `json:"author"`
	State        WorkspacePresenceState `json:"state"`
	LastActiveAt int                    `json:"lastActiveAt"`
	Workspace    *Workspace             `json:"workspace"`
}

type WorkspaceRequestedReviewActivity struct {
	ID        string     `json:"id"`
	CreatedAt int        `json:"createdAt"`
	Author    *Author    `json:"author"`
	IsRead    bool       `json:"isRead"`
	Workspace *Workspace `json:"workspace"`
	Review    *Review    `json:"review"`
}

func (WorkspaceRequestedReviewActivity) IsWorkspaceActivity() {}

type WorkspaceReviewedActivity struct {
	ID        string     `json:"id"`
	CreatedAt int        `json:"createdAt"`
	Author    *Author    `json:"author"`
	IsRead    bool       `json:"isRead"`
	Workspace *Workspace `json:"workspace"`
	Review    *Review    `json:"review"`
}

func (WorkspaceReviewedActivity) IsWorkspaceActivity() {}

type WorkspaceWatcher struct {
	User      *User                  `json:"user"`
	Workspace *Workspace             `json:"workspace"`
	Status    WorkspaceWatcherStatus `json:"status"`
}

type Feature string

const (
	FeatureGitHub    Feature = "GitHub"
	FeatureBuildkite Feature = "Buildkite"
)

var AllFeature = []Feature{
	FeatureGitHub,
	FeatureBuildkite,
}

func (e Feature) IsValid() bool {
	switch e {
	case FeatureGitHub, FeatureBuildkite:
		return true
	}
	return false
}

func (e Feature) String() string {
	return string(e)
}

func (e *Feature) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Feature(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Feature", str)
	}
	return nil
}

func (e Feature) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type IntegrationProvider string

const (
	IntegrationProviderBuildkite IntegrationProvider = "Buildkite"
)

var AllIntegrationProvider = []IntegrationProvider{
	IntegrationProviderBuildkite,
}

func (e IntegrationProvider) IsValid() bool {
	switch e {
	case IntegrationProviderBuildkite:
		return true
	}
	return false
}

func (e IntegrationProvider) String() string {
	return string(e)
}

func (e *IntegrationProvider) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = IntegrationProvider(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid IntegrationProvider", str)
	}
	return nil
}

func (e IntegrationProvider) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type LicenseValidationStatus string

const (
	LicenseValidationStatusUnknown LicenseValidationStatus = "Unknown"
	LicenseValidationStatusOk      LicenseValidationStatus = "Ok"
	LicenseValidationStatusInvalid LicenseValidationStatus = "Invalid"
	LicenseValidationStatusExpired LicenseValidationStatus = "Expired"
)

var AllLicenseValidationStatus = []LicenseValidationStatus{
	LicenseValidationStatusUnknown,
	LicenseValidationStatusOk,
	LicenseValidationStatusInvalid,
	LicenseValidationStatusExpired,
}

func (e LicenseValidationStatus) IsValid() bool {
	switch e {
	case LicenseValidationStatusUnknown, LicenseValidationStatusOk, LicenseValidationStatusInvalid, LicenseValidationStatusExpired:
		return true
	}
	return false
}

func (e LicenseValidationStatus) String() string {
	return string(e)
}

func (e *LicenseValidationStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = LicenseValidationStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid LicenseValidationStatus", str)
	}
	return nil
}

func (e LicenseValidationStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type NotificationChannel string

const (
	NotificationChannelWeb   NotificationChannel = "Web"
	NotificationChannelEmail NotificationChannel = "Email"
)

var AllNotificationChannel = []NotificationChannel{
	NotificationChannelWeb,
	NotificationChannelEmail,
}

func (e NotificationChannel) IsValid() bool {
	switch e {
	case NotificationChannelWeb, NotificationChannelEmail:
		return true
	}
	return false
}

func (e NotificationChannel) String() string {
	return string(e)
}

func (e *NotificationChannel) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = NotificationChannel(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid NotificationChannel", str)
	}
	return nil
}

func (e NotificationChannel) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type NotificationType string

const (
	NotificationTypeComment                  NotificationType = "Comment"
	NotificationTypeReview                   NotificationType = "Review"
	NotificationTypeRequestedReview          NotificationType = "RequestedReview"
	NotificationTypeNewSuggestion            NotificationType = "NewSuggestion"
	NotificationTypeGitHubRepositoryImported NotificationType = "GitHubRepositoryImported"
)

var AllNotificationType = []NotificationType{
	NotificationTypeComment,
	NotificationTypeReview,
	NotificationTypeRequestedReview,
	NotificationTypeNewSuggestion,
	NotificationTypeGitHubRepositoryImported,
}

func (e NotificationType) IsValid() bool {
	switch e {
	case NotificationTypeComment, NotificationTypeReview, NotificationTypeRequestedReview, NotificationTypeNewSuggestion, NotificationTypeGitHubRepositoryImported:
		return true
	}
	return false
}

func (e NotificationType) String() string {
	return string(e)
}

func (e *NotificationType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = NotificationType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid NotificationType", str)
	}
	return nil
}

func (e NotificationType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type ReviewGrade string

const (
	ReviewGradeApprove   ReviewGrade = "Approve"
	ReviewGradeReject    ReviewGrade = "Reject"
	ReviewGradeRequested ReviewGrade = "Requested"
)

var AllReviewGrade = []ReviewGrade{
	ReviewGradeApprove,
	ReviewGradeReject,
	ReviewGradeRequested,
}

func (e ReviewGrade) IsValid() bool {
	switch e {
	case ReviewGradeApprove, ReviewGradeReject, ReviewGradeRequested:
		return true
	}
	return false
}

func (e ReviewGrade) String() string {
	return string(e)
}

func (e *ReviewGrade) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ReviewGrade(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ReviewGrade", str)
	}
	return nil
}

func (e ReviewGrade) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type StatusType string

const (
	StatusTypePending StatusType = "Pending"
	StatusTypeHealthy StatusType = "Healthy"
	StatusTypeFailing StatusType = "Failing"
)

var AllStatusType = []StatusType{
	StatusTypePending,
	StatusTypeHealthy,
	StatusTypeFailing,
}

func (e StatusType) IsValid() bool {
	switch e {
	case StatusTypePending, StatusTypeHealthy, StatusTypeFailing:
		return true
	}
	return false
}

func (e StatusType) String() string {
	return string(e)
}

func (e *StatusType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = StatusType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid StatusType", str)
	}
	return nil
}

func (e StatusType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type ViewStatusState string

const (
	ViewStatusStateReady        ViewStatusState = "Ready"
	ViewStatusStateUploading    ViewStatusState = "Uploading"
	ViewStatusStateDownloading  ViewStatusState = "Downloading"
	ViewStatusStateTransferring ViewStatusState = "Transferring"
	ViewStatusStateFinishing    ViewStatusState = "Finishing"
	ViewStatusStateDisconnected ViewStatusState = "Disconnected"
	ViewStatusStateReconciling  ViewStatusState = "Reconciling"
	ViewStatusStateConnecting   ViewStatusState = "Connecting"
	ViewStatusStateScanning     ViewStatusState = "Scanning"
)

var AllViewStatusState = []ViewStatusState{
	ViewStatusStateReady,
	ViewStatusStateUploading,
	ViewStatusStateDownloading,
	ViewStatusStateTransferring,
	ViewStatusStateFinishing,
	ViewStatusStateDisconnected,
	ViewStatusStateReconciling,
	ViewStatusStateConnecting,
	ViewStatusStateScanning,
}

func (e ViewStatusState) IsValid() bool {
	switch e {
	case ViewStatusStateReady, ViewStatusStateUploading, ViewStatusStateDownloading, ViewStatusStateTransferring, ViewStatusStateFinishing, ViewStatusStateDisconnected, ViewStatusStateReconciling, ViewStatusStateConnecting, ViewStatusStateScanning:
		return true
	}
	return false
}

func (e ViewStatusState) String() string {
	return string(e)
}

func (e *ViewStatusState) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ViewStatusState(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ViewStatusState", str)
	}
	return nil
}

func (e ViewStatusState) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type WorkspacePresenceState string

const (
	WorkspacePresenceStateIdle    WorkspacePresenceState = "Idle"
	WorkspacePresenceStateViewing WorkspacePresenceState = "Viewing"
	WorkspacePresenceStateCoding  WorkspacePresenceState = "Coding"
)

var AllWorkspacePresenceState = []WorkspacePresenceState{
	WorkspacePresenceStateIdle,
	WorkspacePresenceStateViewing,
	WorkspacePresenceStateCoding,
}

func (e WorkspacePresenceState) IsValid() bool {
	switch e {
	case WorkspacePresenceStateIdle, WorkspacePresenceStateViewing, WorkspacePresenceStateCoding:
		return true
	}
	return false
}

func (e WorkspacePresenceState) String() string {
	return string(e)
}

func (e *WorkspacePresenceState) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = WorkspacePresenceState(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid WorkspacePresenceState", str)
	}
	return nil
}

func (e WorkspacePresenceState) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type WorkspaceWatcherStatus string

const (
	WorkspaceWatcherStatusWatching WorkspaceWatcherStatus = "Watching"
	WorkspaceWatcherStatusIgnored  WorkspaceWatcherStatus = "Ignored"
)

var AllWorkspaceWatcherStatus = []WorkspaceWatcherStatus{
	WorkspaceWatcherStatusWatching,
	WorkspaceWatcherStatusIgnored,
}

func (e WorkspaceWatcherStatus) IsValid() bool {
	switch e {
	case WorkspaceWatcherStatusWatching, WorkspaceWatcherStatusIgnored:
		return true
	}
	return false
}

func (e WorkspaceWatcherStatus) String() string {
	return string(e)
}

func (e *WorkspaceWatcherStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = WorkspaceWatcherStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid WorkspaceWatcherStatus", str)
	}
	return nil
}

func (e WorkspaceWatcherStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
