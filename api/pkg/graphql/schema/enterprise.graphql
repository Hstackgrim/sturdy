extend type Query {
  # GitHub Integration Metadata
  gitHubApp: GitHubApp!

  # List all available repositories that the user can setup with Sturdy
  gitHubRepositories: [GitHubRepository!]!
}

extend type Mutation {
  updateCodebaseGitHubIntegration(
    input: UpdateCodebaseGitHubIntegrationInput!
  ): CodebaseGitHubIntegration!
  createOrUpdateGitHubPullRequest(
    input: CreateOrUpdateGitHubPullRequestInput!
  ): GitHubPullRequest!
  mergeGitHubPullRequest(
    input: MergeGitHubPullRequestInput!
  ): GitHubPullRequest!

  # Import a branch from a connected GitHub repository to a new workspace.
  createWorkspaceFromGitHubBranch(
    input: CreateWorkspaceFromGitHubBranchInput!
  ): Workspace!
  importGitHubPullRequests(input: ImportGitHubPullRequestsInput!): Codebase!
  refreshGitHubCodebases: [Codebase!]!

  # Setup a codebase with GitHub
  setupGitHubRepository(input: SetupGitHubRepositoryInput!): Codebase!

  createOrUpdateBuildkiteIntegration(
    input: CreateOrUpdateBuildkiteIntegrationInput!
  ): Integration!

  # Instant integration
  triggerInstantIntegration(input: TriggerInstantIntegrationInput!): [Status!]!

  # Third party integrations
  deleteIntegration(input: DeleteIntegrationInput!): Integration!

  # Installation
  updateInstallation(input: UpdateInstallationInput!): Installation!

  # createOrUpdateCodebaseRemote is experimental
  createOrUpdateCodebaseRemote(
    input: CreateOrUpdateCodebaseRemoteInput!
  ): Remote!

  # pushWorkspace is experimental
  # pushWorkspace pushes the workspace to the configured GitHub Repository or Remote.
  # If pushing to a GitHub Repository, a pull request will be created.
  pushWorkspace(input: PushWorkspaceInput!): Workspace!
  pullCodebase(input: PullCodebaseInput!): Codebase!
  pushCodebase(input: PushCodebaseInput!): Codebase!
}

extend type Subscription {
  updatedGitHubPullRequest(workspaceID: ID!): GitHubPullRequest!

  updatedGitHubPullRequestStatuses(id: ID!): Status!
}

extend type User {
  gitHubAccount: GitHubAccount
}

extend type Codebase {
  gitHubIntegration: CodebaseGitHubIntegration
  integrations(id: ID): [Integration!]!

  # remote is experimental
  remote: Remote
}

extend type Status {
  gitHubPullRequest: GitHubPullRequest
}

extend type Workspace {
  # Only applies when there is a github integration for the codebase.
  #
  # Returns one of:
  # - The single currently open pull request for this workspace
  # - The most recently closed pull request if there is no PR which is currently opened
  # - Null if there was never any pull request created for this workspace
  gitHubPullRequest: GitHubPullRequest
}

type CodebaseGitHubIntegration {
  id: ID!
  owner: String!
  name: String!
  createdAt: Int!
  uninstalledAt: Int
  trackedBranch: String
  syncedAt: Int

  # If the GitHub integration is enabled or not.
  # Controllable by the user
  enabled: Boolean!

  # If GitHub is the source of truth or not.
  # When true, Sturdy will open PRs
  gitHubIsSourceOfTruth: Boolean!

  # Error message (from GitHub) if pushing failed
  lastPushErrorMessage: String
  lastPushAt: Int

  codebase: Codebase!
}

type GitHubAccount {
  id: ID!
  login: String!
  isValid: Boolean!
}

enum IntegrationProvider {
  Buildkite
}

interface Integration {
  id: ID!
  codebaseID: ID!
  provider: IntegrationProvider!
  createdAt: Int!
  updatedAt: Int
  deletedAt: Int
}

type BuildkiteIntegration implements Integration {
  id: ID!
  codebaseID: ID!
  provider: IntegrationProvider!
  createdAt: Int!
  updatedAt: Int
  deletedAt: Int

  configuration: BuildkiteIntegrationConfiguration!
}

type BuildkiteIntegrationConfiguration {
  id: ID!
  organizationName: String!
  pipelineName: String!
  apiToken: String!
  webhookSecret: String!
}

enum GitHubPullRequestState {
  Open
  Closed
  Merging
  Merged
}

type GitHubPullRequest {
  id: ID!
  pullRequestNumber: Int!
  open: Boolean!
  merged: Boolean!
  mergedAt: Int
  base: String!
  workspace: Workspace!
  statuses: [Status!]!
  state: GitHubPullRequestState!
}

input CreateOrUpdateGitHubPullRequestInput {
  workspaceID: ID!
  patchIDs: [String!] @deprecated(reason: "not used")
}

input MergeGitHubPullRequestInput {
  workspaceID: ID!
}

input CreateWorkspaceFromGitHubBranchInput {
  codebaseID: ID!
  branchName: String!
}

input ImportGitHubPullRequestsInput {
  codebaseID: ID!
}

input UpdateCodebaseGitHubIntegrationInput {
  id: ID!
  enabled: Boolean
  gitHubIsSourceOfTruth: Boolean
}

extend enum NotificationType {
  GitHubRepositoryImported
}

type GitHubRepositoryImported implements Notification {
  id: ID!
  type: NotificationType!
  createdAt: Int!
  archivedAt: Int
  codebase: Codebase!

  repository: CodebaseGitHubIntegration!
}

type GitHubApp {
  _id: ID! # Always "sturdy"
  name: String!
  clientID: String!
  validation: GithubValidationApp!
}

type GithubValidationApp {
  _id: ID! # Always "sturdy"
  ok: Boolean!
  missingPermissions: [String!]!
  missingEvents: [String!]!
}

input CreateOrUpdateBuildkiteIntegrationInput {
  integrationID: ID
  codebaseID: ID!
  organizationName: String!
  pipelineName: String!
  apiToken: String!
  webhookSecret: String!
}

enum OrganizationPlan {
  Free
  Pro
}

extend type Organization {
  licenses: [License!]!
}

extend type Installation {
  license: License
}

type License {
  id: ID!
  key: String!
  createdAt: Int!
  expiresAt: Int!
  seats: Int!

  status: LicenseStatus!
  messages: [LicenseMessage!]!
}

enum LicenseStatus {
  Valid
  Invalid
}

type LicenseMessage {
  level: LicenseMessageLevel!
  type: LicenseMessageType!
  text: String!
}

enum LicenseMessageType {
  Notification
  Banner
  Fullscreen
}

enum LicenseMessageLevel {
  Error
  Warning
  Info
}

input SetupGitHubRepositoryInput {
  organizationID: ID!

  gitHubInstallationID: ID!
  gitHubRepositoryID: ID!
}

type GitHubRepository {
  id: ID!
  gitHubInstallationID: ID!
  gitHubRepositoryID: ID!
  gitHubOwner: String!
  gitHubName: String!

  codebase: Codebase
}

input UpdateInstallationInput {
  licenseKey: String
}

type Remote {
  id: ID!
  name: String!
  url: String!
  trackedBranch: String!

  basicAuthUsername: String
  basicAuthPassword: String
  keyPair: PublicKey

  # Link to use for opening the repository in the browser
  # Example: "https://github.com/sturdy-dev/sturdy"
  browserLinkRepo: String!

  # Link to use for opening pushed branches in the browser
  # Use the variable "${BRANCH_NAME}" to dynamically add the branch name to the URL
  # Example: "https://github.com/sturdy-dev/sturdy/tree/${BRANCH_NAME}"
  browserLinkBranch: String!

  enabled: Boolean!
}

input CreateOrUpdateCodebaseRemoteInput {
  codebaseID: ID!
  name: String!
  url: String!
  trackedBranch: String!

  # Either basicAuth or keyPairID must be set (mutually exclusive)
  basicAuthUsername: String
  basicAuthPassword: String
  keyPairID: ID

  browserLinkRepo: String!
  browserLinkBranch: String!

  enabled: Boolean!
}

input PushWorkspaceInput {
  workspaceID: ID!

  # Lands the change using Sturdy, and pushes it to the remote afterwards
  landOnSturdyAndPushTracked: Boolean
}

input PullCodebaseInput {
  codebaseID: ID!
}

input PushCodebaseInput {
  codebaseID: ID!
}

input TriggerInstantIntegrationInput {
  changeID: ID
  workspaceID: ID
  providers: [String!]
}
