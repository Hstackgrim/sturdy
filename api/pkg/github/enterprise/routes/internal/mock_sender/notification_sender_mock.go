// Code generated by MockGen. DO NOT EDIT.
// Source: mash/pkg/notification/sender (interfaces: NotificationSender)

// Package mock_sender is a generated GoMock package.
package mock_sender

import (
	context "context"
	notification "getsturdy.com/api/pkg/notification"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockNotificationSender is a mock of NotificationSender interface.
type MockNotificationSender struct {
	ctrl     *gomock.Controller
	recorder *MockNotificationSenderMockRecorder
}

// MockNotificationSenderMockRecorder is the mock recorder for MockNotificationSender.
type MockNotificationSenderMockRecorder struct {
	mock *MockNotificationSender
}

// NewMockNotificationSender creates a new mock instance.
func NewMockNotificationSender(ctrl *gomock.Controller) *MockNotificationSender {
	mock := &MockNotificationSender{ctrl: ctrl}
	mock.recorder = &MockNotificationSenderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNotificationSender) EXPECT() *MockNotificationSenderMockRecorder {
	return m.recorder
}

// Codebase mocks base method.
func (m *MockNotificationSender) Codebase(arg0 context.Context, arg1 string, arg2 notification.NotificationType, arg3, arg4 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Codebase", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(error)
	return ret0
}

// Codebase indicates an expected call of Codebase.
func (mr *MockNotificationSenderMockRecorder) Codebase(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Codebase", reflect.TypeOf((*MockNotificationSender)(nil).Codebase), arg0, arg1, arg2, arg3, arg4)
}

// User mocks base method.
func (m *MockNotificationSender) User(arg0 context.Context, arg1, arg2 string, arg3 notification.NotificationType, arg4 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "User", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(error)
	return ret0
}

// User indicates an expected call of User.
func (mr *MockNotificationSenderMockRecorder) User(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "User", reflect.TypeOf((*MockNotificationSender)(nil).User), arg0, arg1, arg2, arg3, arg4)
}
