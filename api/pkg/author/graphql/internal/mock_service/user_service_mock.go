// Code generated by MockGen. DO NOT EDIT.
// Source: getsturdy.com/api/pkg/users/service (interfaces: Service)

// Package mock_service is a generated GoMock package.
package mock_service

import (
	context "context"
	reflect "reflect"

	author "getsturdy.com/api/pkg/author"
	users "getsturdy.com/api/pkg/users"
	service "getsturdy.com/api/pkg/users/service"
	gomock "github.com/golang/mock/gomock"
)

// MockService is a mock of Service interface.
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
}

// MockServiceMockRecorder is the mock recorder for MockService.
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance.
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// Activate mocks base method.
func (m *MockService) Activate(arg0 context.Context, arg1 *users.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Activate", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Activate indicates an expected call of Activate.
func (mr *MockServiceMockRecorder) Activate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Activate", reflect.TypeOf((*MockService)(nil).Activate), arg0, arg1)
}

// CreateShadow mocks base method.
func (m *MockService) CreateShadow(arg0 context.Context, arg1 string, arg2 service.Referer, arg3 *string) (*users.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateShadow", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*users.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateShadow indicates an expected call of CreateShadow.
func (mr *MockServiceMockRecorder) CreateShadow(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateShadow", reflect.TypeOf((*MockService)(nil).CreateShadow), arg0, arg1, arg2, arg3)
}

// CreateWithPassword mocks base method.
func (m *MockService) CreateWithPassword(arg0 context.Context, arg1, arg2, arg3 string) (*users.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateWithPassword", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*users.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateWithPassword indicates an expected call of CreateWithPassword.
func (mr *MockServiceMockRecorder) CreateWithPassword(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateWithPassword", reflect.TypeOf((*MockService)(nil).CreateWithPassword), arg0, arg1, arg2, arg3)
}

// GetAsAuthor mocks base method.
func (m *MockService) GetAsAuthor(arg0 context.Context, arg1 users.ID) (*author.Author, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAsAuthor", arg0, arg1)
	ret0, _ := ret[0].(*author.Author)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAsAuthor indicates an expected call of GetAsAuthor.
func (mr *MockServiceMockRecorder) GetAsAuthor(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAsAuthor", reflect.TypeOf((*MockService)(nil).GetAsAuthor), arg0, arg1)
}

// GetByEmail mocks base method.
func (m *MockService) GetByEmail(arg0 context.Context, arg1 string) (*users.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByEmail", arg0, arg1)
	ret0, _ := ret[0].(*users.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByEmail indicates an expected call of GetByEmail.
func (mr *MockServiceMockRecorder) GetByEmail(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByEmail", reflect.TypeOf((*MockService)(nil).GetByEmail), arg0, arg1)
}

// GetByID mocks base method.
func (m *MockService) GetByID(arg0 context.Context, arg1 users.ID) (*users.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", arg0, arg1)
	ret0, _ := ret[0].(*users.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockServiceMockRecorder) GetByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockService)(nil).GetByID), arg0, arg1)
}

// GetByIDs mocks base method.
func (m *MockService) GetByIDs(arg0 context.Context, arg1 ...users.ID) ([]*users.User, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetByIDs", varargs...)
	ret0, _ := ret[0].([]*users.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByIDs indicates an expected call of GetByIDs.
func (mr *MockServiceMockRecorder) GetByIDs(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByIDs", reflect.TypeOf((*MockService)(nil).GetByIDs), varargs...)
}

// GetFirstUser mocks base method.
func (m *MockService) GetFirstUser(arg0 context.Context) (*users.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFirstUser", arg0)
	ret0, _ := ret[0].(*users.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFirstUser indicates an expected call of GetFirstUser.
func (mr *MockServiceMockRecorder) GetFirstUser(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFirstUser", reflect.TypeOf((*MockService)(nil).GetFirstUser), arg0)
}

// Inherit mocks base method.
func (m *MockService) Inherit(arg0 context.Context, arg1 users.ID, arg2 *users.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Inherit", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Inherit indicates an expected call of Inherit.
func (mr *MockServiceMockRecorder) Inherit(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Inherit", reflect.TypeOf((*MockService)(nil).Inherit), arg0, arg1, arg2)
}

// UsersCount mocks base method.
func (m *MockService) UsersCount(arg0 context.Context) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UsersCount", arg0)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UsersCount indicates an expected call of UsersCount.
func (mr *MockServiceMockRecorder) UsersCount(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UsersCount", reflect.TypeOf((*MockService)(nil).UsersCount), arg0)
}
