steps:
  - label: ":coverage: :golang: Lint API modules"
    commands:
      - "./download && cd ./tmp_output"
      - "docker-compose -f ci/docker-compose.yaml run go ./scripts/lint-dependencies.sh"

  - label: ":coverage: :golang: Test build"
    commands:
      - "./download && cd ./tmp_output"
      - "docker-compose -f ci/docker-compose.yaml run go ./scripts/build-api-distributions.sh"

  - label: ":docker: :golang: Run unit & end-to-end tests"
    commands:
      - "./download && cd ./tmp_output"
      - "docker-compose -f ci/docker-compose.yaml -f ci/e2e/docker-compose.yaml up --build --exit-code-from go --remove-orphans"

  - label: ":docker: :yarn: Lint and test"
    commands:
      - "./download && cd ./tmp_output"
      - "export UID && export GID=$(id -g $(whoami)) && docker-compose -f ci/docker-compose.web.yaml up --build --exit-code-from web-runner --remove-orphans"

  # - label: ":docker: :golang: :yarn: Build oneliner (no push)"
  #   agents:
  #     queue: "arm"
  #   commands:
  #   - "./download && cd ./tmp_output"
  #   - "./scripts/build-upload-oneliner.sh"
