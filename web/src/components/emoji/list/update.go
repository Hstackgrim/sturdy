package main

import (
	"encoding/json"
	"fmt"
	"io/ioutil"
	"log"
	"net/http"
)

func main() {
	resp, err := http.Get("https://raw.githubusercontent.com/iamcal/emoji-data/master/emoji_pretty.json")
	if err != nil {
		log.Fatalln(err)
	}
	defer resp.Body.Close()

	type emoji struct {
		Name string `json:"name"`
		// Unified        string      `json:"unified"`
		// NonQualified   interface{} `json:"non_qualified"`
		// Docomo         interface{} `json:"docomo"`
		// Au             interface{} `json:"au"`
		// Softbank       interface{} `json:"softbank"`
		// Google         interface{} `json:"google"`
		// Image          string      `json:"image"`
		// SheetX         int         `json:"sheet_x"`
		// SheetY         int         `json:"sheet_y"`
		// ShortName      string      `json:"short_name"`
		ShortNames []string `json:"short_names"`
		// Text           interface{} `json:"text"`
		// Texts          interface{} `json:"texts"`
		// Category       string      `json:"category"`
		// Subcategory    string      `json:"subcategory"`
		// SortOrder      int         `json:"sort_order"`
		// AddedIn        string      `json:"added_in"`
		// HasImgApple    bool        `json:"has_img_apple"`
		// HasImgGoogle   bool        `json:"has_img_google"`
		// HasImgTwitter  bool        `json:"has_img_twitter"`
		// HasImgFacebook bool        `json:"has_img_facebook"`
		/*SkinVariations struct {
			OneF3Fb struct {
				Unified        string `json:"unified"`
				NonQualified   string `json:"non_qualified"`
				Image          string `json:"image"`
				SheetX         int    `json:"sheet_x"`
				SheetY         int    `json:"sheet_y"`
				AddedIn        string `json:"added_in"`
				HasImgApple    bool   `json:"has_img_apple"`
				HasImgGoogle   bool   `json:"has_img_google"`
				HasImgTwitter  bool   `json:"has_img_twitter"`
				HasImgFacebook bool   `json:"has_img_facebook"`
			} `json:"1F3FB"`
			OneF3Fc struct {
				Unified        string `json:"unified"`
				NonQualified   string `json:"non_qualified"`
				Image          string `json:"image"`
				SheetX         int    `json:"sheet_x"`
				SheetY         int    `json:"sheet_y"`
				AddedIn        string `json:"added_in"`
				HasImgApple    bool   `json:"has_img_apple"`
				HasImgGoogle   bool   `json:"has_img_google"`
				HasImgTwitter  bool   `json:"has_img_twitter"`
				HasImgFacebook bool   `json:"has_img_facebook"`
			} `json:"1F3FC"`
			OneF3Fd struct {
				Unified        string `json:"unified"`
				NonQualified   string `json:"non_qualified"`
				Image          string `json:"image"`
				SheetX         int    `json:"sheet_x"`
				SheetY         int    `json:"sheet_y"`
				AddedIn        string `json:"added_in"`
				HasImgApple    bool   `json:"has_img_apple"`
				HasImgGoogle   bool   `json:"has_img_google"`
				HasImgTwitter  bool   `json:"has_img_twitter"`
				HasImgFacebook bool   `json:"has_img_facebook"`
			} `json:"1F3FD"`
			OneF3Fe struct {
				Unified        string `json:"unified"`
				NonQualified   string `json:"non_qualified"`
				Image          string `json:"image"`
				SheetX         int    `json:"sheet_x"`
				SheetY         int    `json:"sheet_y"`
				AddedIn        string `json:"added_in"`
				HasImgApple    bool   `json:"has_img_apple"`
				HasImgGoogle   bool   `json:"has_img_google"`
				HasImgTwitter  bool   `json:"has_img_twitter"`
				HasImgFacebook bool   `json:"has_img_facebook"`
			} `json:"1F3FE"`
			OneF3Ff struct {
				Unified        string `json:"unified"`
				NonQualified   string `json:"non_qualified"`
				Image          string `json:"image"`
				SheetX         int    `json:"sheet_x"`
				SheetY         int    `json:"sheet_y"`
				AddedIn        string `json:"added_in"`
				HasImgApple    bool   `json:"has_img_apple"`
				HasImgGoogle   bool   `json:"has_img_google"`
				HasImgTwitter  bool   `json:"has_img_twitter"`
				HasImgFacebook bool   `json:"has_img_facebook"`
			} `json:"1F3FF"`
		} `json:"skin_variations"`*/
	}

	var res []emoji

	data, err := ioutil.ReadAll(resp.Body)
	if err != nil {
		log.Fatalln(err)
	}

	if err := json.Unmarshal(data, &res); err != nil {
		log.Fatalln(err)
	}

	type outmoji struct {
		Name string `json:"name"`
	}

	var outs []outmoji

	for _, e := range res {
		for _, surr := range e.ShortNames {
			outs = append(outs, outmoji{Name: surr})
		}
	}

	outList, err := json.MarshalIndent(outs, "", "  ")
	if err != nil {
		log.Fatalln(err)
	}

	fmt.Println(`// Generated by update.go (do not edit)

export type Emoji = {
  name: string;
};

export const emojis: Array<Emoji> =`, string(outList))
}
