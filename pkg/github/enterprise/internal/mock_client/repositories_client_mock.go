// Code generated by MockGen. DO NOT EDIT.
// Source: mash/pkg/github/client (interfaces: RepositoriesClient)

// Package mock_client is a generated GoMock package.
package mock_client

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	github "github.com/google/go-github/v39/github"
)

// MockRepositoriesClient is a mock of RepositoriesClient interface.
type MockRepositoriesClient struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoriesClientMockRecorder
}

// MockRepositoriesClientMockRecorder is the mock recorder for MockRepositoriesClient.
type MockRepositoriesClientMockRecorder struct {
	mock *MockRepositoriesClient
}

// NewMockRepositoriesClient creates a new mock instance.
func NewMockRepositoriesClient(ctrl *gomock.Controller) *MockRepositoriesClient {
	mock := &MockRepositoriesClient{ctrl: ctrl}
	mock.recorder = &MockRepositoriesClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepositoriesClient) EXPECT() *MockRepositoriesClientMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockRepositoriesClient) Get(arg0 context.Context, arg1, arg2 string) (*github.Repository, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1, arg2)
	ret0, _ := ret[0].(*github.Repository)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Get indicates an expected call of Get.
func (mr *MockRepositoriesClientMockRecorder) Get(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockRepositoriesClient)(nil).Get), arg0, arg1, arg2)
}

// GetByID mocks base method.
func (m *MockRepositoriesClient) GetByID(arg0 context.Context, arg1 int64) (*github.Repository, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", arg0, arg1)
	ret0, _ := ret[0].(*github.Repository)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetByID indicates an expected call of GetByID.
func (mr *MockRepositoriesClientMockRecorder) GetByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockRepositoriesClient)(nil).GetByID), arg0, arg1)
}

// ListCollaborators mocks base method.
func (m *MockRepositoriesClient) ListCollaborators(arg0 context.Context, arg1, arg2 string, arg3 *github.ListCollaboratorsOptions) ([]*github.User, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCollaborators", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]*github.User)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListCollaborators indicates an expected call of ListCollaborators.
func (mr *MockRepositoriesClientMockRecorder) ListCollaborators(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCollaborators", reflect.TypeOf((*MockRepositoriesClient)(nil).ListCollaborators), arg0, arg1, arg2, arg3)
}
