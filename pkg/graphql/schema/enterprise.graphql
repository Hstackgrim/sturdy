extend type Query {
    # GitHub Integration Metadata
    gitHubApp: GitHubApp!
}

extend type Mutation {
    updateCodebaseGitHubIntegration(input: UpdateCodebaseGitHubIntegrationInput!): CodebaseGitHubIntegration!
    createOrUpdateGitHubPullRequest(input: CreateOrUpdateGitHubPullRequestInput!): GitHubPullRequest!
    mergeGitHubPullRequest(input: MergeGitHubPullRequestInput!): GitHubPullRequest!

    # Import a branch from a connected GitHub repository to a new workspace.
    createWorkspaceFromGitHubBranch(input: CreateWorkspaceFromGitHubBranchInput!): Workspace!
    importGitHubPullRequests(input: ImportGitHubPullRequestsInput!): Codebase!
    refreshGitHubCodebases: [Codebase!]!

    createOrUpdateBuildkiteIntegration(input: CreateOrUpdateBuildkiteIntegrationInput!): Integration!

    # Instant integration
    triggerInstantIntegration(input: TriggerInstantIntegrationInput!): [Status!]!

    # Third party integrations
    deleteIntegration(input: DeleteIntegrationInput!): Integration!
}

extend type Subscription {
    updatedGitHubPullRequest(workspaceID: ID!): GitHubPullRequest!

    updatedGitHubPullRequestStatuses(id: ID!): Status!
}

extend type User {
    gitHubAccount: GitHubAccount
}

extend type Codebase {
    gitHubIntegration: CodebaseGitHubIntegration
    integrations(id: ID): [Integration!]!
}

extend type Status {
    gitHubPullRequest: GitHubPullRequest
}

extend type Workspace {
    # Only applies when there is a github integration for the codebase.
    #
    # Returns one of:
    # - The single currently open pull request for this workspace
    # - The most recently closed pull request if there is no PR which is currently opened
    # - Null if there was never any pull request created for this workspace
    gitHubPullRequest: GitHubPullRequest
}

type CodebaseGitHubIntegration {
    id: ID!
    owner: String!
    name: String!
    createdAt: Int!
    uninstalledAt: Int
    trackedBranch: String
    syncedAt: Int

    # If the GitHub integration is enabled or not.
    # Controllable by the user
    enabled: Boolean!

    # If GitHub is the source of truth or not.
    # When true, Sturdy will open PRs
    gitHubIsSourceOfTruth: Boolean!

    # Error message (from GitHub) if pushing failed
    lastPushErrorMessage: String
    lastPushAt: Int

    codebase: Codebase!
}

type GitHubAccount {
    id: ID!
    login: String!
}

enum IntegrationProvider {
    Buildkite
}

interface Integration {
    id: ID!
    codebaseID: ID!
    provider: IntegrationProvider!
    createdAt: Int!
    updatedAt: Int
    deletedAt: Int
}

type BuildkiteIntegration implements Integration {
    id: ID!
    codebaseID: ID!
    provider: IntegrationProvider!
    createdAt: Int!
    updatedAt: Int
    deletedAt: Int

    configuration: BuildkiteIntegrationConfiguration!
}

type BuildkiteIntegrationConfiguration {
    id: ID!
    organizationName: String!
    pipelineName: String!
    apiToken: String!
    webhookSecret: String!
}

type GitHubPullRequest {
    id: ID!
    pullRequestNumber: Int!
    open: Boolean!
    merged: Boolean!
    mergedAt: Int
    base: String!
    workspace: Workspace!
    statuses: [Status!]!
}

input CreateOrUpdateGitHubPullRequestInput {
    workspaceID: ID!
    patchIDs: [String!]!
}

input MergeGitHubPullRequestInput {
    workspaceID: ID!
}

input CreateWorkspaceFromGitHubBranchInput {
    codebaseID: ID!
    branchName: String!
}

input ImportGitHubPullRequestsInput {
    codebaseID: ID!
}

input UpdateCodebaseGitHubIntegrationInput {
    id: ID!
    enabled: Boolean
    gitHubIsSourceOfTruth: Boolean
}

extend enum NotificationType {
    GitHubRepositoryImported
}

type GitHubRepositoryImported implements Notification {
    id: ID!
    type: NotificationType!
    createdAt: Int!
    archivedAt: Int
    codebase: Codebase!

    repository: CodebaseGitHubIntegration!
}

type GitHubApp {
    _id: ID! # Always "sturdy"
    name: String!
    clientID: String!
}

input CreateOrUpdateBuildkiteIntegrationInput {
    integrationID: ID
    codebaseID: ID!
    organizationName: String!
    pipelineName: String!
    apiToken: String!
    webhookSecret: String!
}
