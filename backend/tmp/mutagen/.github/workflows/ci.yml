# Set the workflow name.
name: CI

# Execute the workflow on pushes and pull requests.
on: [push, pull_request]

# Define the workflow jobs.
jobs:
  macos:
    name: Test macOS
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-go@v2
        with:
          go-version: '^1.16'
      - run: go version
      - run: scripts/ci/setup_ssh.sh
      - run: scripts/ci/setup_partitions_darwin.sh
      - run: scripts/ci/analyze.sh
      - run: scripts/ci/test.sh
      - uses: codecov/codecov-action@v1
        with:
          file: ./coverage.txt
      - run: scripts/ci/build.sh
      - uses: actions/upload-artifact@v2
        with:
          name: bundles
          path: build/release/*
          retention-days: 2
  linux:
    name: Test Linux
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-go@v2
        with:
          go-version: '^1.16'
      - run: docker version
      - run: go version
      - run: scripts/ci/setup_ssh.sh
      - run: scripts/ci/setup_docker.sh
      - run: scripts/ci/analyze.sh
      - run: scripts/ci/test.sh
      - uses: codecov/codecov-action@v1
        with:
          file: ./coverage.txt
      - run: scripts/ci/test_386.sh
      - run: scripts/ci/build.sh
  windows:
    name: Test Windows
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-go@v2
        with:
          go-version: '^1.16'
      - run: docker version
      - run: go version
      - run: scripts/ci/setup_docker.sh
        shell: bash
      - run: diskpart /s scripts\ci\setup_partitions_windows.txt
      - run: scripts/ci/analyze.sh
        shell: bash
      - run: scripts/ci/test.sh
        shell: bash
      - uses: codecov/codecov-action@v1
        with:
          file: ./coverage.txt
      - run: scripts/ci/test_386.sh
        shell: bash
      - run: scripts/ci/build.sh
        shell: bash
  windows_installer:
    name: Build Windows Installer
    runs-on: windows-latest
    needs: [macos, windows]
    steps:
      - run: echo "Coming soon..."
        shell: bash
  release:
    name: Upload Release
    runs-on: ubuntu-latest
    needs: [macos, linux, windows, windows_installer]
    if: ${{ github.event_name == 'push' && startsWith(github.ref, 'refs/tags/') }}
    steps:
      - uses: actions/download-artifact@v2
        with:
          name: bundles
          path: bundles
      - uses: alexellis/upload-assets@0.2.3
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          asset_paths: '["bundles/*"]'
